AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: RDS Data Classification Pipeline

Globals:
  Function:
    Runtime: nodejs12.x
    Handler: index.handler
    MemorySize: 128

Parameters:
  Prefix:
    Description: Naming Prefix
    Type: String
    Default: dcp
  VPCCIDR:
    Description: VPC0
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet0CIDR:
    Description: Public Subnet 0
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet1CIDR:
    Description: Public Subnet 0
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet0CIDR:
    Description: Private Subnet 0
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1CIDR:
    Description: Private Subnet 1
    Type: String
    Default: 10.0.3.0/24
  DBInstanceID:
    Default: mydbinstance
    Description: My database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  DBInstanceClass:
    Default: db.m5.large
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 20 and 65536 GiB.
  DBUser:
    Description: MySQL User
    Default: admin
    Type: String
    MinLength: '4'
    MaxLength: '20'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: MySQL Password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBName:
    Default: sakila
    Description: DB Name
    Type: String

Resources:
#   __     ______   ____ 
#   \ \   / /  _ \ / ___|
#    \ \ / /| |_) | |    
#     \ V / |  __/| |___ 
#      \_/  |_|    \____|
#                        
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-vpc'
          
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-igw'
          
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  PublicSubnet0:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref PublicSubnet0CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-public_subnet0'
  
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-public_subnet1'
 
  PrivateSubnet0:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref PrivateSubnet0CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-private_subnet0'
 
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-private_subnet1'
  
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-public_rt'
 
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-private_rt'
  
  PublicDefaultRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnet0RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet0
  
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateSubnet0RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet0
  
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  
  DMSSG:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn:
      - PrivateSubnet0
      - PrivateSubnet1
    Properties:
      VpcId: !Ref VPC
      GroupDescription: DMS security group
  
  RDSSG:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn:
      - PrivateSubnet0
      - PrivateSubnet1
    Properties:
      VpcId: !Ref VPC
      GroupDescription: RDS security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref VPCCIDR

#    _  ____  __ ____  
#   | |/ /  \/  / ___| 
#   | ' /| |\/| \___ \ 
#   | . \| |  | |___) |
#   |_|\_\_|  |_|____/ 
#                      
  MacieCuratedKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: Key for Macie Curated bucket
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow Macie Principal to use the key
            Effect: Allow
            Principal:
              Service: macie.amazonaws.com
            Action:
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey'
            Resource: '*'
          - Sid: Allow S3 Principal to use the key
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - 'kms:Decrypt'
            Resource: '*'
  
  MacieCuratedKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}-macie-curated-bucket-encryption-key'
      TargetKeyId:
        Ref: MacieCuratedKey
  
  ConfidentialKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: Key for confidential bucket
      Tags:
        - Key: Classification
          Value: Confidential
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-2
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow Macie Service Role to use the key
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/macie.amazonaws.com/AWSServiceRoleForAmazonMacie'
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
            Resource: '*'

  ConfidentialKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}-confidential-bucket-encryption-key'
      TargetKeyId:
        Ref: ConfidentialKey              
            
#    ____ _____ 
#   / ___|___ / 
#   \___ \ |_ \ 
#    ___) |__) |
#   |____/____/ 
#               
  MacieLandingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Prefix}-macie-landing-${AWS::Region}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  MacieCuratedBucket:
    DependsOn: MacieCuratedKey
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Prefix}-macie-curated-${AWS::Region}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !GetAtt MacieCuratedKey.Arn

  MacieCuratedBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MacieCuratedBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetBucketLocation'
            Effect: Allow
            Principal:
              Service: macie.amazonaws.com
            Resource: !GetAtt MacieCuratedBucket.Arn
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Principal:
              Service: macie.amazonaws.com
            Resource: !Sub '${MacieCuratedBucket.Arn}/*'
          - Action:
              - 's3:*'
            Effect: Deny
            Principal: '*'
            Resource: !Sub '${MacieCuratedBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  GlueLandingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Prefix}-glue-landing-${AWS::Region}-${AWS::AccountId}'
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt StartGlueJobLambdaFunction.Arn
    DependsOn:
      - StartGlueJobLambdaFunctionPermission

  GlueCuratedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Prefix}-glue-curated-${AWS::Region}-${AWS::AccountId}'

  GlueAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Prefix}-glue-assets-${AWS::Region}-${AWS::AccountId}'

  MacieFindingsDeliveryStream:
    DependsOn:
      - DeliveryPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${GlueLandingBucket}'
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '1'
        CompressionFormat: UNCOMPRESSED
        Prefix: ''
        RoleARN: !GetAtt DeliveryRole.Arn

  MacieFindingsEventRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: 'All Findings from Amazon Macie'
      EventPattern: 
        source: 
          - "aws.macie"
        detail-type: 
          - "Macie Finding"
      State: "ENABLED"
      Name: MacieFindinfs2Firehose
      Targets:
      - Arn: !GetAtt 
          - MacieFindingsDeliveryStream
          - Arn
        Id: MacieFindingsEventRule
        RoleArn: !GetAtt 
          - EventDeliveryRole
          - Arn

#    ____  ____  ____  
#   |  _ \|  _ \/ ___| 
#   | |_) | | | \___ \ 
#   |  _ <| |_| |___) |
#   |_| \_\____/|____/ 
#                    
  MySQLDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: MySQL
      EngineVersion: 8.0.16
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSG

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DBSubnetGroup for RDS Instance
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1        

#    _____ ____ ____  
#   | ____/ ___|___ \ 
#   |  _|| |     __) |
#   | |__| |___ / __/ 
#   |_____\____|_____|
#                     
  RDSLoaderInstance: 
    Type: AWS::EC2::Instance
    DependsOn: MySQLDB
    Properties: 
      ImageId: ami-032930428bf1abbff
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet0
      SecurityGroupIds:
        - !Ref RDSSG
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo yum install -y mysql
            cd /tmp
            wget https://downloads.mysql.com/docs/sakila-db.tar.gz
            tar -zxvf sakila-db.tar.gz
            mysql -u ${DBUser} -p${DBPassword} -h ${MySQLDB.Endpoint.Address} -P ${MySQLDB.Endpoint.Port} < sakila-db/sakila-schema.sql
            mysql -u ${DBUser} -p${DBPassword} -h ${MySQLDB.Endpoint.Address} -P ${MySQLDB.Endpoint.Port} < sakila-db/sakila-data.sql
            sudo shutdown -h now            
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-RDS-Loader'

#    ____  __  __ ____  
#   |  _ \|  \/  / ___| 
#   | | | | |\/| \___ \ 
#   | |_| | |  | |___) |
#   |____/|_|  |_|____/ 
#                       
  DMSReplicationInstance: 
    DependsOn: DMSReplicationSubnetGroup
    Type: "AWS::DMS::ReplicationInstance"
    Properties: 
      ReplicationInstanceClass: dms.t2.small
      PubliclyAccessible: false 
      AvailabilityZone: !GetAtt PublicSubnet0.AvailabilityZone
      ReplicationSubnetGroupIdentifier: !Ref DMSReplicationSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DMSSG
        
  DMSReplicationSubnetGroup:
    DependsOn: 
      - PublicSubnet0
      - PublicSubnet1
    Type: "AWS::DMS::ReplicationSubnetGroup"
    Properties: 
      ReplicationSubnetGroupDescription: DMS Subnet Group
      ReplicationSubnetGroupIdentifier: dmssubnetgroup-demo
      SubnetIds: 
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1
        
  DBEndpoint:
    Type: "AWS::DMS::Endpoint"
    Properties: 
      DatabaseName: !Ref DBName
      EndpointType: source
      EngineName: mysql
      Password: !Ref DBPassword
      Port: !GetAtt MySQLDB.Endpoint.Port
      ServerName: !GetAtt MySQLDB.Endpoint.Address
      Username: !Ref DBUser
      
  S3Endpoint:
    Type: AWS::DMS::Endpoint
    Properties: 
        EndpointType: target
        EngineName: s3
        ExtraConnectionAttributes: "addColumnName:true"
        S3Settings: 
            BucketName: !Ref MacieLandingBucket
            ServiceAccessRoleArn: !GetAtt DMSAccessRole.Arn

  RDSToS3Task:
    Type: 'AWS::DMS::ReplicationTask'
    Properties:
      MigrationType: full-load
      ReplicationInstanceArn: !Ref DMSReplicationInstance
      SourceEndpointArn: !Ref DBEndpoint
      TargetEndpointArn: !Ref S3Endpoint
      ReplicationTaskSettings: |
        {
          "TargetMetadata": {
            "SupportLobs": true
          },
          "FullLoadSettings": {
            "TargetTablePrepMode": "DROP_AND_CREATE"
          },
          "Logging": {
            "EnableLogging": true
          }
        }
      TableMappings: !Sub |
        {
          "rules": [
            {
              "rule-type": "selection",
              "rule-id": "1",
              "rule-name": "1",
              "object-locator": {
                "schema-name": "${DBName}",
                "table-name": "%"
              },
              "rule-action": "include",
              "filters": []
            }
            ]
        }


#    _                    _         _       
#   | |    __ _ _ __ ___ | |__   __| | __ _ 
#   | |   / _` | '_ ` _ \| '_ \ / _` |/ _` |
#   | |__| (_| | | | | | | |_) | (_| | (_| |
#   |_____\__,_|_| |_| |_|_.__/ \__,_|\__,_|
#                                           
  StartGlueJobLambdaFunction:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub '${Prefix}-start-glue-workflow'
      CodeUri: start-glue-job/
      Description: Data Classification Pipeline - Start Glue Workflow
      Role: !GetAtt StartGlueJobLambdaRole.Arn
      Environment:
        Variables:
          #JOB_NAME: 'data-classification-pipeline' # Note: Always refer to GlueJob.Name, it's hard coded to avoid circular dependency
          WORKFLOW_NAME: !Ref GlueWorkflow
          
  StartGlueJobLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StartGlueJobLambdaFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub 'arn:aws:s3:::${Prefix}-glue-landing-${AWS::Region}-${AWS::AccountId}'
       
  CreateGlueScriptLambdaFunction:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub '${Prefix}-create-upload-glue-script'
      CodeUri: create-glue-script/
      Description: Data Classification Pipeline - Upload Glue script into S3
      Role: !GetAtt CreateGlueScriptLambdaRole.Arn
      Environment:
        Variables:
          GLUE_ASSETS_BUCKET: !Ref GlueAssetsBucket
          GLUE_CURATED_BUCKET: !Ref GlueCuratedBucket
          GLUE_LANDING_BUCKET: !Ref GlueLandingBucket
          ACCOUNT_ID: !Ref AWS::AccountId

  CreateGlueScriptCustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CreateGlueScriptLambdaFunction.Arn


#     ____ _            
#    / ___| |_   _  ___ 
#   | |  _| | | | |/ _ \
#   | |_| | | |_| |  __/
#    \____|_|\__,_|\___|
#                       
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties: 
      CatalogId: !Ref AWS::AccountId
      DatabaseInput: 
        Name: dcp
        Description: 'Data Classification Pipeline'
    
#  GlueInputTable:
#    Type: AWS::Glue::Table
#    Properties: 
#     CatalogId: !Ref AWS::AccountId
#     DatabaseName: !Ref GlueDatabase
#     TableInput:
#        Name: dcp-glue-landing
#        Description: 'Data Classification Pipeline Input Table'
#        TableType: EXTERNAL_TABLE
#        Parameters: {
#            "classification": "json",
#            "compressionType": "none",
#            "typeOfData": "file"
#        }
#        StorageDescriptor:
#          Columns: 
#          - Name: version
#            Type: string
#          - Name: id
#            Type: string
#          - Name: detail-type
#            Type: string
#          - Name: source
#            Type: string
#          - Name: account
#            Type: string
#          - Name: time
#            Type: string
#          - Name: region
#            Type: string
#          - Name: resources
#            Type: array<string>
#          - Name: detail
#            Type: struct<schemaVersion:string,id:string,accountId:string,partition:string,region:string,type:string,title:string,description:string,severity:struct<score:int,description:string>,createdAt:string,updatedAt:string,count:int,resourcesAffected:struct<s3Bucket:struct<arn:string,name:string,createdAt:string,owner:struct<displayName:string,id:string>,tags:array<struct<key:string,value:string>>,defaultServerSideEncryption:struct<encryptionType:string,kmsMasterKeyId:string>,publicAccess:struct<permissionConfiguration:struct<bucketLevelPermissions:struct<accessControlList:struct<allowsPublicReadAccess:boolean,allowsPublicWriteAccess:boolean>,bucketPolicy:struct<allowsPublicReadAccess:boolean,allowsPublicWriteAccess:boolean>,blockPublicAccess:struct<ignorePublicAcls:boolean,restrictPublicBuckets:boolean,blockPublicAcls:boolean,blockPublicPolicy:boolean>>,accountLevelPermissions:struct<blockPublicAccess:struct<ignorePublicAcls:boolean,restrictPublicBuckets:boolean,blockPublicAcls:boolean,blockPublicPolicy:boolean>>>,effectivePermission:string>>,s3Object:struct<bucketArn:string,key:string,path:string,extension:string,lastModified:string,versionId:string,serverSideEncryption:struct<encryptionType:string,kmsMasterKeyId:string>,size:int,storageClass:string,tags:array<string>,publicAccess:boolean,etag:string>>,category:string,classificationDetails:struct<jobArn:string,jobId:string,result:struct<status:struct<code:string,reason:string>,sizeClassified:int,mimeType:string,havingMoreDetections:boolean,sensitiveData:array<struct<category:string,totalCount:int,detections:array<struct<type:string,count:int,occurrences:struct<lineRanges:array<struct<start:int,end:int,startColumn:int>>,offsetRanges:string,pages:string,records:string,cells:array<struct<row:int,column:int,columnName:string>>>>>>>,customDataIdentifiers:struct<totalCount:int,detections:array<string>>>,detailedResultsLocation:string>,policyDetails:string,sample:boolean,archived:boolean>
#          - Name: partition_0
#            Type: string
#          - Name: partition_1
#            Type: string
#          - Name: partition_2
#            Type: string
#          - Name: partition_3
#            Type: string
#          Location: !Sub 's3://${Prefix}-glue-landing-${AWS::Region}-${AWS::AccountId}/'
#          InputFormat: "org.apache.hadoop.mapred.TextInputFormat"
#          OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"
#          Compressed: true
#          NumberOfBuckets: -1
#          SerdeInfo: 
#           SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
#           Parameters: 
#            paths: "account,detail,detail-type,id,region,resources,source,time,version"
#          StoredAsSubDirectories: false
            
  GlueInputTableCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Role: !GetAtt GlueJobRole.Arn
      Description: Data Classification Pipeline Input Table Crawler
      SchemaChangePolicy: ''
      DatabaseName: !Ref GlueDatabase
      Targets:
        S3Targets:
          - Path: !Ref GlueLandingBucket
      Name: dcp-glue-landing-crawler
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Configuration: "{\"Version\":1.0,\"Grouping\":{\"TableGroupingPolicy\":\"CombineCompatibleSchemas\"},\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"},\"Tables\":{\"AddOrUpdateBehavior\":\"MergeNewColumns\"}}}"

  GlueOutputTableCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Role: !GetAtt GlueJobRole.Arn
      Description: Data Classification Pipeline Output Table Crawler
      SchemaChangePolicy: ''
      DatabaseName: !Ref GlueDatabase
      Targets:
        S3Targets:
          - Path: !Ref GlueCuratedBucket
      TablePrefix: ''
      Name: dcp-glue-curated-crawler
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Configuration: "{\"Version\":1.0,\"Grouping\":{\"TableGroupingPolicy\":\"CombineCompatibleSchemas\"},\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"},\"Tables\":{\"AddOrUpdateBehavior\":\"MergeNewColumns\"}}}"

  GlueJob:
    Type: AWS::Glue::Job
    Properties:
      Name: 'dcp-etl-job'
      Description: 'Data Classification Pipeline ETL Job'
      Role: !GetAtt GlueJobRole.Arn
      Command:
        Name: glueetl
        PythonVersion: 3
        ScriptLocation: !Sub 's3://${GlueAssetsBucket}/scripts/dcp-script.py'
      DefaultArguments: 
        "--TempDir": !Sub "s3://${GlueAssetsBucket}/temporary/"
        "--class": "GlueApp"
        "--enable-continuous-cloudwatch-log": "true"
        "--enable-metrics": "true"
        "--enable-spark-ui": "true"
        "--job-bookmark-option": "job-bookmark-enable"
        "--job-language": "python"
        "--spark-event-logs-path": !Sub "s3://${GlueAssetsBucket}/sparkHistoryLogs/"
      WorkerType: 'G.1X'
      NumberOfWorkers: 2
      MaxRetries: 0
      GlueVersion: '2.0'
    DependsOn: CreateGlueScriptCustomResource

  GlueWorkflow:
    Type: AWS::Glue::Workflow
    Properties: 
      Description: 'Data Classification Pipeline Workflow'
      Name: 'dcp-workflow'

  GlueWFStartTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Description: 'Start Trigger'
      Name: start-workflow
      Type: ON_DEMAND
      Actions: 
        - CrawlerName: !Ref GlueInputTableCrawler
      WorkflowName: !Ref GlueWorkflow
    DependsOn: GlueInputTableCrawler
      
  GlueWFPostInputCrawlerTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: 'Post Input Crawler Success Condition'
      Type: "CONDITIONAL"
      StartOnCreation: true
      Actions: 
        - JobName: !Ref GlueJob
      Predicate:
        Conditions:
         - LogicalOperator: EQUALS
           CrawlerName: !Ref GlueInputTableCrawler
           CrawlState: SUCCEEDED
        Logical: ANY
      WorkflowName: !Ref GlueWorkflow
    DependsOn: GlueJob

  GlueWFPostETLJobTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: 'Post ETL Job Success Condition'
      Type: "CONDITIONAL"
      StartOnCreation: true
      Actions: 
        - CrawlerName: !Ref GlueOutputTableCrawler
      Predicate:
        Conditions:
          - LogicalOperator: EQUALS
            JobName: !Ref GlueJob
            State: 'SUCCEEDED'
        Logical: 'ANY'
      WorkflowName: !Ref GlueWorkflow
    DependsOn: GlueOutputTableCrawler


#   |_ _|  / \  |  \/  |
#    | |  / _ \ | |\/| |
#    | | / ___ \| |  | |
#   |___/_/   \_\_|  |_|
#                       
  DMSAccessRole: 
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: 'dms-vpc-role'
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "dms.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole'
      Policies:
        -
          PolicyName: DMStoS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: 
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: 
                  - !GetAtt MacieLandingBucket.Arn
                  - !Sub "${MacieLandingBucket.Arn}/*"

  GlueJobRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: DataClassificationPipelineGlueJobRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: 'Allow'             
            Principal:
              Service: 'glue.amazonaws.com'      
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
      Policies:
        - PolicyName: S3ReadWriteAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 's3:ListBucket'
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource:
                  - !Sub ${GlueLandingBucket.Arn}
                  - !Sub ${GlueCuratedBucket.Arn}
                  - !Sub ${GlueAssetsBucket.Arn}                
                  - !Sub ${GlueLandingBucket.Arn}/*
                  - !Sub ${GlueCuratedBucket.Arn}/*
                  - !Sub ${GlueAssetsBucket.Arn}/*

  StartGlueJobLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: DataClassificationPipelineStartGlueJobLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: 'Allow'             
            Principal:
              Service: 'lambda.amazonaws.com'      
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: StartGlueJob
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'glue:StartWorkflowRun'
                Resource:
                  - '*'
                  
  CreateGlueScriptLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: DataClassificationPipelineCreateGlueScriptLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: 'Allow'             
            Principal:
              Service: 'lambda.amazonaws.com'      
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: StartGlueJob
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 's3:PutObject'
                Resource:
                  - !Sub '${GlueAssetsBucket.Arn}/*'

  DeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
  DeliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Sub 'arn:aws:s3:::${GlueLandingBucket}'
              - !Sub 'arn:aws:s3:::${GlueLandingBucket}/*'
      Roles:
        - !Ref DeliveryRole
        
  EventDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'

  EventDeliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: event_firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'firehose:PutRecord'
              - 'firehose:PutRecordBatch'
            Resource:
              - !Sub 'arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${MacieFindingsDeliveryStream}'
      Roles:
        - !Ref EventDeliveryRole

Outputs:
  EndpointAddress:
    Description: Address of the RDS endpoint.
    Value: !GetAtt MySQLDB.Endpoint.Address

  EndpointPort:
    Description: Port of the RDS endpoint.
    Value: !GetAtt MySQLDB.Endpoint.Port
